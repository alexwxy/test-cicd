before_script:
  - export GIT_TAG=${CI_COMMIT_TAG}
  - export GIT_COMMIT=${CI_COMMIT_SHORT_SHA}
  - export GOROOT="/usr/local/go"
  - export GOVERSION="go1.19.4"
  - go env -w GOPROXY="https://goproxy.cn,direct"
  - >
    if [[ "${CI_COMMIT_TAG}" =~ ^[0-9]{1,}.[0-9]{1,}[.\|-][0-9]{1,} ]]; then
      export VERSION="${CI_COMMIT_TAG}"
    else
      export VERSION="latest"
    fi
  - echo ${VERSION}

stages:
  - test
  - code-quality
  - build

test:
  stage: test
  tags:
    - aly-shell-runner
  image: golang:1.19
  script:
    - make test ARTIFACTS_SERVER=${ALY_RAW_GROUP_DEV}
  after_script:
    - make clean
  artifacts:
    name: "${CI_PROJECT_NAME}_${CI_COMMIT_SHORT_SHA}_${CI_PIPELINE_IID}"
    paths:
      - cover.out
    expire_in: 24 h

code-quality:
  stage: code-quality
  tags:
    - aly-shell-runner
  image:
    name: ${ALY_DOCKER_GROUP_DEV}/sonarsource/sonar-scanner-cli:5
    entrypoint: [ "" ]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"   # Defines the location of the analysis task cache
    GIT_DEPTH: 0
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - echo ${CI_PROJECT_NAME} ${SONAR_HOST_URL} ${SONAR_TOKEN}
    - |
      sonar-scanner -Dsonar.projectKey=${CI_PROJECT_NAME} \
      -Dsonar.projectName=${CI_PROJECT_NAME} \
      -Dsonar.qualitygate.wait=true \
      -Dsonar.host.url=${SONAR_HOST_URL} \
      -Dsonar.login=${SONAR_TOKEN} \
      -Dsonar.sourceEncoding=UTF-8 \
      -Dsonar.sources=. \
      -Dsonar.go.coverage.reportPaths=cover.out
  allow_failure: false

build:
  stage: build
  tags:
    - aly-shell-runner
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - echo "Login nexus docker registry..."
    - echo "${PASSWD_TEST_CLOUD}" | docker login ${ALY_DOCKER_HOST_DEV} --username ${USER_CLOUD} --password-stdin
    - echo "Login nexus helm repostory..."
  script:
    - echo "Build docker image..."
    - make docker-build IMG_REGISTRY=${ALY_DOCKER_HOST_DEV}
    - echo "Push docker image..."
    - make docker-push IMG_REGISTRY=${ALY_DOCKER_HOST_DEV}
    - echo "Upload helm chart to Nexus..."
    - echo ${VERSION}
    - export CHART_VERSION="${CI_COMMIT_TAG}"
    - echo ${CHART_VERSION}
    - make helm-package HELM_CHART_VERSION=${CHART_VERSION}
    - curl -v --user ${USER_CLOUD}:${PASSWD_TEST_CLOUD} --upload-file ./charts/bpaas-core-operator-${CHART_VERSION}.tgz ${ALY_HELM_HOST_DEV}/bpaas-core-operator-${CHART_VERSION}.tgz